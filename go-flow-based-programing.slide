Flow-based programming
In Golang
25 Apr 2017
Tags: golang, flow, paradigm

Thuc Le
Software Engineer
ledongthuc@gmail.com

: Hello, I'm Thuc. I'm software developer of Culture Match. It's research company to build an algorithm to match people's personalities to companies based upon CULTURE FIT
: When working on Culture Match, one of model programming we frequently to use is Flow-based programming. 
: Today, I hope I can share what's I know about this model to you
: The first thing we need to talk about, what's flow-based programming

* Definition

Flow-based Programing is a programing paradigm that defines applications as networks of *black* *box* *processes* which exchange data across *predefined* *connections* by *message* *passing*, where connections are *specified* *externally* to the processes. 
- Paul Morrison

.image go-flow-based-programing/paul_morrison.jpg _ 500

: As the definition, the flow based programming is ...
: Is it hard to understand? I think so. Remember all of them is big challenge.
: Currently, you can ignore it, I will show you the basic concept step by step. When you understand all of them, you can go back and see the definition  later.

* Core concepts

* Process
- The process is black box
- The box doesn't care the outside world

.image go-flow-based-programing/concept_black_box_process.png

: The first one, FBP defines an application as networks of blackbox processes
: In FBP, smallest unit handles the logic of application is processes.
: The process, don't care about outide. It just handle the logic that's pre-defined
: As the image, you see we have three of processes, you don't know what's inside of them but you know the role of them.
: The `Read file` use to will have logic read file, `Slit words` have logic to slit a content to words, counter may count something
: But you will see something wrong with processes, if the processes don't care about outside, how they get information about outside.
: How the process `Get file` can get the link of file. and How to return the content value

* Ports
- Way the processes communicate with outside world
- A process can have one or many inputs/outputs ports
- The "black box" process looks like data factory

.image go-flow-based-programing/concept_ports.png

: Currently, the processes work with input/output but they're still independent
: We only see the parts of application. We don't know how process work together. We don't know what's flow of application
: So we need something called connection

* Connection
- The connection is defined externally to the processes
- The blackbox processes can be reuse in other application by re-conected without any changes.
- The connections work as streams of structured data chunks, called information packages (IPs)

.image go-flow-based-programing/concept_connection.png

: The connection link between processes through their port
: It's defined independently with the process. 
: When we change the flow of application, We don't need to change anything inside of the blackbox processes. And when we change the logic of a blackbox, we also don't need break the flow.
: One important thing in concept of FBP, the connection works like the streams with buffer. The data is transfered is called structed data chunks or information packages (IPs). It's green circles in image

* Other notes:
- More than one process can execute the same piece of code
- Processes work asynchronously

.image go-flow-based-programing/concept_fbp.png

: The blackbox processes can be reuseable. So, a the same piece of the code can be excuted by many processes at the same time.
: You can see in the image, the `Split words` box get the content data, process and return the list of words. 'Split words' box doesn't wait  `Counter` box done to continue, but it get next content and split. So the processes work asynchronously. The processes don't wait another.

* Benefits:
- Improve the workflow visualization
- When develop the process, we focus on components development. It's easier for coding and testing.
- When develop the network, we focus on application's flow.
- FBP applications generally run in less elapsed time than conventional programs

: The FBP ask us to draw the flow of application before converting to source code. It makes the application flow is more visual and easy to understand with complex flows.
: When develop the process, we focus on components development. What's input, how to process and return the result. It's easier for coding and testing.
: When develop the network, we focus on application's flow, how the business run. We have time to focus on general picture  of application
: Because FBP processes can continue executing as long they have data to work on and somewhere to put their output, FBP applications generally run in less elapsed time than conventional programs, and make optimal use of all the processors on a machine, with no special programming required.

* Drawback
- Complex the simple logic
- Take time of CPU to setup of the network of processes before running

: With the simple logic application, it's make the application code more complex
: We will take a little time to create the instance of processes, link them together by connection before using it.
: Next, we continue to how to implement the Flow-based programming in Golang

* Goflow

: Currently, my company implements the Flow-based programming based on Goflow

* Goflow
- A library of golang to implement the Flow-based programming model.
- https://github.com/trustmaster/goflow
- Try with simple application:

.image go-flow-based-programing/demo_fbp.png

: It's golang's library that support to implement Flow-based programming.
: You can go to this library at link I share in slide.
: So I will go to step by step of this library by example to create a simple application
: This is application use to print the greeter sentence with your name. Example Hello Lazada
: 1st,  greeter process will be get the name and return the sentence greeter, the 2nd, printer process that used to print the input content

: Goflow

* Goflow - Define processes

.code -numbers go-flow-based-programing/demo_goflow.go /START GREETING/,/END GREETING/

* Goflow - Define processes

.code -numbers go-flow-based-programing/demo_goflow.go /START PRINTER/,/END PRINTER/

: So next, how we network them as the application

* Goflow - Networking

.code -numbers go-flow-based-programing/demo_goflow.go /START NETWORKING/,/END NETWORKING/

: In goflow, the connection is channel of specific type

* Goflow - Run

.code -numbers go-flow-based-programing/demo_goflow.go /START RUN/,/END RUN/

* Goflow - Benchmark

- Run normally: 1.8-1.9 seconds
- Run goflow: 1.5-1.7 seconds

* Goflow - Concurrency model
Goflow 3 different concurrency models at process level
- Asynchronous
- Synchronous
- Pool of workers

  greeter := new(Greeter)

  // Sync mode
  greeter.Component.Mode = flow.ComponentModeAsync

  // Sync mode
  greeter.Component.Mode = flow.ComponentModeSync

  // Pool of workers mode
  greeter.Component.Mode = flow.ComponentModePool
  greeter.Component.PoolSize = 8 // 8 workers in the crew

: Goflow support us 3 different concurrency models
: The first one is Asynchronous. Each time a process receive a input data. It will spawns a new goroutine to handle it. So, if we have 2 input at the same time, they won't be blocked together. It's default
: The next one is Synchronous. Only one goroutine is swans to handle logic of a process. 
: The last one is pool of workers. It's the same with Asynchronous model with limit of workers to run.

* Goflow - State lock
- Support built-in lock in process

  type StateExample struct {
    flow.Component

    In1 <-chan string

    // lock
    StateLock *sync.Mutex

    // state
    counter int       
    buffer  [32]string 
  }

  func (p *StateExample) OnIn2(item String) {
    // We can safely modify fields here
    p.buffer = append(item, s)
    p.counter++
  }

: GoFlow provides a built-in mechanism to make state modification thread-safe for asynchronous processes

* Goflow - Types of port
- Goflow supports 3 types of ports: Input port, output port bi-direction port
  type PortExample struct {
    flow.Component
    Foo <-chan int  // receive-only inport
    Bar chan<- int  // send-only outport
    Boo chan string // can be inport or outport
  }

- Support method raise when a connection is closed

  func (p *Printer) OnLine(line string) {
    fmt.Println(line)
  }

  func (c *ComponentType) OnLineClose() {
    // Clean something
  }

: Based on channel, the goflow supports 3 types of ports: Input port, output port bi-direction port
: The goflow support event when the connection are close to clean the data or resource
